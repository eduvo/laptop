#!/bin/sh

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_file() {
  local file="$1"
  local text="$2"

  if [ "$file" = "$HOME/.zshrc" ]; then
    if [ -w "$HOME/.zshrc.local" ]; then
      file="$HOME/.zshrc.local"
    else
      file="$HOME/.zshrc"
    fi
  fi

  if ! grep -Fqs "$text" "$file"; then
    printf "\n%s\n" "$text" >> "$file"
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_file "$HOME/.zshrc" 'export PATH="$HOME/.bin:$PATH"'

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh…"
      chsh -s "$(which zsh)"
    ;;
esac

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s…" "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping…" "$1"
    fi
  else
    fancy_echo "Installing %s…" "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  brew list -1 | grep -Fqx "$1"
}

brew_is_upgradable() {
  ! brew outdated --quiet "$1" >/dev/null
}

brew_tap_is_installed() {
  brew tap | grep -Fqx "$1"
}

brew_tap() {
  if ! brew_tap_is_installed "$1"; then
    fancy_echo "Tapping $1…"
    brew tap "$1" 2> /dev/null
  fi
}

gem_install_or_update() {
  if gem list "$1" | grep "^$1 ("; then
    fancy_echo "Updating %s…" "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s…" "$1"
    gem install "$@"
  fi
}

brew_cask_expand_alias() {
  brew cask info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_cask_is_installed() {
  local NAME
  NAME=$(brew_cask_expand_alias "$1")
  brew cask list -1 | grep -Fqx "$NAME"
}

app_is_installed() {
  local app_name
  app_name=$(echo "$1" | cut -d'-' -f1)
  find /Applications -iname "$app_name*" -maxdepth 1 | egrep '.*' > /dev/null
}

brew_cask_install() {
  if app_is_installed "$1" || brew_cask_is_installed "$1"; then
    fancy_echo "$1 is already installed. Skipping…"
  else
    fancy_echo "Installing $1…"
    brew cask install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew…"
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    # shellcheck disable=SC2016
    append_to_file "$HOME/.zshrc" 'export PATH="/usr/local/bin:$PATH"'
else
  fancy_echo "Homebrew already installed. Skipping…"
fi

fancy_echo "Installing Oh My Zsh"
curl -fsSL "https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh" | zsh
append_to_file "$HOME/.zshrc" 'ZSH_THEME="superjarin"'
append_to_file "$HOME/.zshrc" 'plugins=(brew gitfast rvm)'
append_to_file "$HOME/.zshrc" 'eval "$(direnv hook zsh)"'
append_to_file "$HOME/.zshrc" 'export PATH="$HOME/.bin:$PATH"'
append_to_file "$HOME/.zshrc" 'export GOPATH="/Users/mike/gocode"'
append_to_file "$HOME/.zshrc" 'export PATH="$PATH:/usr/local/sbin" # for RabbitMQ'
append_to_file "$HOME/.zshrc" 'export PATH="$PATH:/usr/local/opt/go/libexec/bin" # for go get'
append_to_file "$HOME/.zshrc" 'export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting'
append_to_file "$HOME/.zshrc" 'test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"'

fancy_echo "Updating Homebrew formulas…"
brew update
brew_tap 'gapple/services'

brew_install_or_upgrade 'direnv'
brew_install_or_upgrade 'elixir'
brew_install_or_upgrade 'erlang'
brew_install_or_upgrade 'git'
brew_install_or_upgrade 'git-flow-avh'
brew_install_or_upgrade 'gitup'
brew_install_or_upgrade 'gem_install_or_update'
brew_install_or_upgrade 'htop'
brew_install_or_upgrade 'imagemagick'
brew_install_or_upgrade 'memcached'
brew_install_or_upgrade 'most'
brew_install_or_upgrade 'mtr'
brew_install_or_upgrade 'mysql'
brew_install_or_upgrade 'node'
brew_install_or_upgrade 'pkg-config'
brew_install_or_upgrade 'postgresql'
brew_install_or_upgrade 'puma/puma/puma-dev'
brew_install_or_upgrade 'qt'
brew_install_or_upgrade 'rabbitmq'
brew_install_or_upgrade 'redis'
brew_install_or_upgrade 'shellcheck'
brew_install_or_upgrade 'sqlite'
brew_install_or_upgrade 'tree'
brew_install_or_upgrade 'watch'
brew_install_or_upgrade 'wget'

# Prince
brew_tap 'caius/prince'
brew_install_or_upgrade 'prince'

#downlevel mysql
#brew_tap 'homebrew/versions'
#brew_install_or_upgrade 'mysql55'
#append_to_file "$HOME/.zshrc" 'export PATH="$PATH: /usr/local/opt/mysql55/bin"'

fancy_echo "Restarting Services…"
brew services restart memcached
brew services restart mysql
brew services restart postgresql
brew services restart rabbitmq
brew services restart redis

append_to_file "$HOME/.gemrc" 'gem: --no-document'

if ! command -v rvm >/dev/null; then
  fancy_echo 'Installing RVM and the latest Ruby…'
  curl -L https://get.rvm.io | bash -s stable --ruby --auto-dotfiles --autolibs=enable
  . ~/.rvm/scripts/rvm
else
  local_version="$(rvm -v 2> /dev/null | awk '$2 != ""{print $2}')"
  latest_version="$(curl -s https://raw.githubusercontent.com/wayneeseguin/rvm/stable/VERSION)"
  if [ "$local_version" != "$latest_version" ]; then
    fancy_echo 'Upgrading RVM…'
    rvm get stable --auto-dotfiles --autolibs=enable --with-gems="bundler"
  else
    fancy_echo "Already using the latest version of RVM. Skipping…"
  fi
fi

source $HOME/.rvm/scripts/rvm

fancy_echo 'Updating RubyGems…'
gem update --system
gem_install_or_update 'bundler'

fancy_echo "Configuring Bundler…"
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

brew_install_or_upgrade 'heroku-toolbelt'

brew_tap 'caskroom/cask'
brew_install_or_upgrade 'brew-cask'
brew_tap 'caskroom/versions'
brew_cask_install 'alfred'
brew_cask_install 'base'
brew_cask_install 'colloquy'
brew_cask_install 'dropbox'
brew_cask_install 'evernote'
brew_cask_install 'firefoxdeveloperedition'
brew_cask_install 'flux'
brew_cask_install 'geekbench'
brew_cask_install 'google-chrome'
brew_cask_install 'iterm2'
brew_cask_install 'kaleidoscope'
brew_cask_install 'kindle'
brew_cask_install 'mactracker'
brew_cask_install 'mou'
brew_cask_install 'navicat_premium'
brew_cask_install 'send-to-kindle'
brew_cask_install 'sequel-pro'
brew_cask_install 'skype'
brew_cask_install 'slack'
brew_cask_install 'sourcetree'
brew_cask_install 'sublime-text3'
brew_cask_install 'the-unarchiver'
brew_cask_install 'tilemill'
brew_cask_install 'vlc'
brew_cask_install 'xquartz'
brew_cask_install 'rowanj-gitx'

if [ -f "$HOME/.laptop.local" ]; then
  . "$HOME/.laptop.local"
fi

append_to_file "$HOME/.rvmrc" 'rvm_auto_reload_flag=2'

# Phoenix and related
mix local.hex --force
mix archive.install https://github.com/phoenixframework/archives/raw/master/phoenix_new.ez --force

# Set up puma-dev
sudo puma-dev -setup
puma-dev -install

# Create user for PostgreSQL
# TODO: Version dependency is pretty fragile
/usr/local/Cellar/postgresql/9.5.4/bin/createuser -s postgres

# Show hidden files by default
defaults write com.apple.finder AppleShowAllFiles YES
killall Finder /System/Library/CoreServices/Finder.app